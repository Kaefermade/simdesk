workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always

.build_conditions:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
      changes:
        - gradle.properties

.deploy_conditions:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
      changes:
        - docker-compose.yml

stages:
  - prepare
  - test
  - build
  - release
  - deploy

default:
  image: gradle:8.7-jdk21-alpine
  tags:
    - gitlab-org-docker

prepare-environment:
  stage: prepare
  needs: [ ]
  script:
    - echo "Expanding environment variables"
    - VERSION=`cat gradle.properties | grep "version" | cut -d'=' -f2`
    - VERSION="${VERSION#[vV]}"
    - VERSION_MAJOR="${VERSION%%\.*}"
    - VERSION_MINOR="${VERSION#*.}"
    - VERSION_MINOR="${VERSION_MINOR%.*}"
    - VERSION_PATCH="${VERSION##*.}"
    - echo "VERSION=$VERSION" >> .env
    - echo "VERSION_MAJOR=$VERSION_MAJOR" >> .env
    - echo "VERSION_MINOR=$VERSION_MINOR" >> .env
    - echo "VERSION_PATCH=$VERSION_PATCH" >> .env
    - cat .env
  artifacts:
    reports:
      dotenv: .env
    expire_in: 1 week

test:
  stage: test
  needs: [ ]
  script:
    - echo "Running unit tests"
    - gradle test
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml

build-jar:
  stage: build
  needs:
    - job: test
  rules:
    - !reference [ .build_conditions, rules ]
  script:
    - echo "Building application"
    - gradle clean vaadinBuildFrontend bootJar
    - echo "Application build successfully."
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1h

build-docker:
  stage: build
  needs:
    - job: prepare-environment
    - job: build-jar
  rules:
    - !reference [ .build_conditions, rules ]
  image: docker:26.0.0
  services:
    - docker:26.0.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - echo "Publishing application"
    - docker build --pull -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:$VERSION_MAJOR -t $CI_REGISTRY_IMAGE:$VERSION_MAJOR.$VERSION_MINOR .
    - docker push --all-tags $CI_REGISTRY_IMAGE
    - echo "Application published to container registry successfully."

create release:
  stage: release
  needs:
    - job: prepare-environment
    - job: build-jar
    - job: build-docker
  rules:
    - !reference [ .build_conditions, rules ]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release for version $VERSION"
  release:
    name: "Release $VERSION"
    tag_name: "$VERSION"
    description: "$CI_COMMIT_MESSAGE"
    ref: "$CI_COMMIT_SHA"
  allow_failure: true

deploy:
  stage: deploy
  tags:
    - sustineo-01
    - shell
  needs:
    - job: build-docker
      optional: true
  rules:
    - !reference [ .deploy_conditions, rules ]
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  variables:
    TARGET_DIR: /opt/simdesk
  script:
    - echo "Deploying application"
    - cd $TARGET_DIR
    - cp -f $CI_PROJECT_DIR/docker-compose.yml docker-compose.yml
    - docker compose up -d
    - echo "Application deployed successfully."

